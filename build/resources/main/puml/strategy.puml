@startuml
class com.strategy.App {
+ {static} void main(String[])
+ {static} void executeContext()
+ {static} void executeEnum()
+ {static} void executeFactory()
}
interface com.strategy.context.Strategy {
~ void execute()
}
class com.strategy.context.StrategyA {
+ void execute()
}
class com.strategy.factory.ContextFactory {
- Strategy strategy
+ void setStrategy(Strategy)
+ void executeStrategy()
}
class com.strategy.factory.StrategyA {
+ void execute()
}
class com.strategy.context.StrategyB {
+ void execute()
}
interface com.strategy.factory.Strategy {
~ void execute()
}
class com.strategy.factory.StrategyFactory {
- {static} StrategyFactory INSTANCE
+ {static} StrategyFactory getInstance()
+ Strategy createStrategy(String)
}
class com.strategy.enums.ContextEnum {
~ StrategyEnum strategy
+ void setStrategy(StrategyEnum)
+ void executeStrategy()
}
class com.strategy.context.Context {
- Strategy strategy
+ void setStrategy(Strategy)
+ void executeStrategy()
}
class com.strategy.factory.StrategyB {
+ void execute()
}
enum com.strategy.enums.StrategyEnum {
+  STRATEGY_A
+  STRATEGY_B
+ {abstract}void execute()
}


com.strategy.context.Strategy <|.. com.strategy.context.StrategyA
com.strategy.factory.Strategy <|.. com.strategy.factory.StrategyA
com.strategy.context.Strategy <|.. com.strategy.context.StrategyB
com.strategy.factory.Strategy <|.. com.strategy.factory.StrategyB
@enduml